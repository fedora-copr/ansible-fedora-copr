---

# We run this task file twice.  First against the new backend with a temporary
# disk mounted, then against the old backend with the real data mounted.  The
# 'stop_all_services' is defined only for the second run (for the first run, it
# is not necessary to stop resalloc, because services_disabled=true).

- name: stopping services touching result dir
  service:
    state: stopped
    enabled: false
    name: "{{ item }}"
  loop:
    - lighttpd
    - copr-backend.target

- name: kill all build workers potentially touching result dir
  shell: |
    systemctl kill copr-backend-build  --signal=SIGKILL || :

- name: dont allocate new builders
  replace:
    path: /etc/resallocserver/pools.yaml
    regexp: 'max: \d+'
    replace: 'max: 0'
  when: stop_all_services is defined

- name: evacuate all builders
  shell: "su - resalloc -c 'resalloc-maint resource-delete --all'"
  when: stop_all_services is defined

- name: delete all resalloc resources
  pause:
    prompt: |
      Please,
      (a) wait for prunerepo processes, or kill them,
      (b) wait for action processing workers, or kill them (preferably not)
      (c) wait until there are no resalloc workers
      then hit ENTER
  when: stop_all_services is defined

- name: kill all action workers potentially touching result dir
  shell: |
    systemctl kill copr-backend-action --signal=SIGKILL || :

- name: stopping all backend services
  service:
    state: stopped
    enabled: false
    name: "{{ item }}"
  loop:
    - resalloc
    - crond
  when: stop_all_services is defined

- name: stop timers
  shell: systemctl stop *timer
  when: stop_all_services is defined

- import_tasks: tasks/wait-for-unused-mountpoint.yml
  vars:
    mountpoints:
      - "{{ backend_storage_mount }}"
